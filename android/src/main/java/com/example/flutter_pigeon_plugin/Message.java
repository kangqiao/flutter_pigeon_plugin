// Autogenerated from Pigeon (v17.1.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.example.flutter_pigeon_plugin;

import static java.lang.annotation.ElementType.METHOD;
import static java.lang.annotation.RetentionPolicy.CLASS;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.lang.annotation.Retention;
import java.lang.annotation.Target;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class Message {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  @NonNull
  protected static FlutterError createConnectionError(@NonNull String channelName) {
    return new FlutterError("channel-error",  "Unable to establish connection on channel: " + channelName + ".", "");
  }

  @Target(METHOD)
  @Retention(CLASS)
  @interface CanIgnoreReturnValue {}

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class F2NMessage {
    private @Nullable String msg;

    public @Nullable String getMsg() {
      return msg;
    }

    public void setMsg(@Nullable String setterArg) {
      this.msg = setterArg;
    }

    public static final class Builder {

      private @Nullable String msg;

      @CanIgnoreReturnValue
      public @NonNull Builder setMsg(@Nullable String setterArg) {
        this.msg = setterArg;
        return this;
      }

      public @NonNull F2NMessage build() {
        F2NMessage pigeonReturn = new F2NMessage();
        pigeonReturn.setMsg(msg);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(msg);
      return toListResult;
    }

    static @NonNull F2NMessage fromList(@NonNull ArrayList<Object> list) {
      F2NMessage pigeonResult = new F2NMessage();
      Object msg = list.get(0);
      pigeonResult.setMsg((String) msg);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class N2FMessage {
    private @Nullable String msg2;

    public @Nullable String getMsg2() {
      return msg2;
    }

    public void setMsg2(@Nullable String setterArg) {
      this.msg2 = setterArg;
    }

    public static final class Builder {

      private @Nullable String msg2;

      @CanIgnoreReturnValue
      public @NonNull Builder setMsg2(@Nullable String setterArg) {
        this.msg2 = setterArg;
        return this;
      }

      public @NonNull N2FMessage build() {
        N2FMessage pigeonReturn = new N2FMessage();
        pigeonReturn.setMsg2(msg2);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(1);
      toListResult.add(msg2);
      return toListResult;
    }

    static @NonNull N2FMessage fromList(@NonNull ArrayList<Object> list) {
      N2FMessage pigeonResult = new N2FMessage();
      Object msg2 = list.get(0);
      pigeonResult.setMsg2((String) msg2);
      return pigeonResult;
    }
  }

  /** Asynchronous error handling return type for non-nullable API method returns. */
  public interface Result<T> {
    /** Success case callback method for handling returns. */
    void success(@NonNull T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for nullable API method returns. */
  public interface NullableResult<T> {
    /** Success case callback method for handling returns. */
    void success(@Nullable T result);

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }
  /** Asynchronous error handling return type for void API method returns. */
  public interface VoidResult {
    /** Success case callback method for handling returns. */
    void success();

    /** Failure case callback method for handling errors. */
    void error(@NonNull Throwable error);
  }

  private static class FlutterMessageCodec extends StandardMessageCodec {
    public static final FlutterMessageCodec INSTANCE = new FlutterMessageCodec();

    private FlutterMessageCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return F2NMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof F2NMessage) {
        stream.write(128);
        writeValue(stream, ((F2NMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * flutter发往native的方法flutterSendMessage
   *
   * Generated interface from Pigeon that represents a handler of messages from Flutter.
   */
  public interface FlutterMessage {

    void flutterSendMessage(@NonNull F2NMessage msg);

    /** The codec used by FlutterMessage. */
    static @NonNull MessageCodec<Object> getCodec() {
      return FlutterMessageCodec.INSTANCE;
    }
    /**Sets up an instance of `FlutterMessage` to handle messages through the `binaryMessenger`. */
    static void setUp(@NonNull BinaryMessenger binaryMessenger, @Nullable FlutterMessage api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.flutter_pigeon_plugin.FlutterMessage.flutterSendMessage", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                F2NMessage msgArg = (F2NMessage) args.get(0);
                try {
                  api.flutterSendMessage(msgArg);
                  wrapped.add(0, null);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }

  private static class NativeMessageCodec extends StandardMessageCodec {
    public static final NativeMessageCodec INSTANCE = new NativeMessageCodec();

    private NativeMessageCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return N2FMessage.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof N2FMessage) {
        stream.write(128);
        writeValue(stream, ((N2FMessage) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /**
   * native发往flutter的方法nativeSendMessage
   *
   * Generated class from Pigeon that represents Flutter messages that can be called from Java.
   */
  public static class NativeMessage {
    private final @NonNull BinaryMessenger binaryMessenger;

    public NativeMessage(@NonNull BinaryMessenger argBinaryMessenger) {
      this.binaryMessenger = argBinaryMessenger;
    }

    /** Public interface for sending reply. */ 
    /** The codec used by NativeMessage. */
    static @NonNull MessageCodec<Object> getCodec() {
      return NativeMessageCodec.INSTANCE;
    }
    public void nativeSendMessage(@NonNull N2FMessage msgArg, @NonNull VoidResult result) {
      final String channelName = "dev.flutter.pigeon.flutter_pigeon_plugin.NativeMessage.nativeSendMessage";
      BasicMessageChannel<Object> channel =
          new BasicMessageChannel<>(
              binaryMessenger, channelName, getCodec());
      channel.send(
          new ArrayList<Object>(Collections.singletonList(msgArg)),
          channelReply -> {
            if (channelReply instanceof List) {
              List<Object> listReply = (List<Object>) channelReply;
              if (listReply.size() > 1) {
                result.error(new FlutterError((String) listReply.get(0), (String) listReply.get(1), (String) listReply.get(2)));
              } else {
                result.success();
              }
            }  else {
              result.error(createConnectionError(channelName));
            } 
          });
    }
  }
}
